<p>Grafpartitionering anses vara en standardlösning för att eektivt bearbeta stora grafer, när behandling av dem på en enda maskin blir ineektiv på grund av dess begränsade beräkningskraft och lagringsutrymme. I grafpartitionering är hela gra- fen delad mellan olika beräkningsnoder som bearbetar grafen parallellt. Under de tidiga stadierna av forskning gjord på grafpartitionering har olika oine partitio- neringsmetoder introducerats; dessa metoder skapar höga beräkningskostnadner eftersom de behandlar hela grafen före uppdelning. Därför introducerades senare en online graördelningsmetod som kallas streaming graph partitioning för att minska beräkningskostnaden genom att tilldela kanterna eller hörnen under processen till beräkningsnoder utan att bearbeta grafen före partitionering.</p> 

<p>I vår uppsats presenterade vi en experimentell studie av olika strömmande graf- partitioneringsmetoder som använder två uppdelningstekniker: hörnpartitionering och kantpartitionering. Kantpartitionering har visat sig vara bra för uppdelning av mycket skeva grafer. Efter genomförandet av olika partitioneringsmetoder, har vi föreslagit en partitioneringsalgoritm som använder gradinformationen från hör- nen. Dessutom mätte vi eekten av olika partitioneringsmetoder i graph stream processing-algoritmerna.</p> 

<p>Våra resultat visar att Fennel presterade bättre än Linear Greedy för hörnpartitione- ring eftersom den visar lägre kantavskärning och bättre lastbalansering. Dessutom för kantpartitionering, den stegbaserade partitioneringen presterade bättre än Least Cost Incremental och Least Cost Incremental Advanced att minska replikationsfaktorn, men stegbaserade partitioneringen hanterar inte lastbalansering så bra. I slutän- dan, visar vi att de anpassade partitioneringsmetoder, jämfört med standard hash partitionering, sparar minnesutrymme genom att minska storleken av aggregerade tillstånd under utförande av olika grafalgoritmer på de resulterande partitionerna. Stegbaserade partitioneringen presterade väl genom att minska storleken av aggrege- rade tillstånd i genomsnitt upp till 50%. Andra algoritmer inkluderar: Fennel, Linear Greedy, Least Cost Incremental och Least Cost Incremental Advanced. De minskade storleken på aggregerade tillståndet med i genomsnitt upp till 21%, 10%, 27% och 48%.</p> 


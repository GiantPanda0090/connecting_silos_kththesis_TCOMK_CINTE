<p>Graph partitioning is considered to be a standard solution to process huge graphs eciently when processing them on a single machine becomes inecient due to its limited computation power and storage space. In graph partitioning, the whole graph is divided among dierent computing nodes that process the graph in parallel. During the early stages of research done on graph partitioning, dierent oine partitioning methods were introduced; these methods create high computation cost as they process the whole graph prior to partitioning. Therefore, an online graph partitioning method called as streaming graph partitioning was introduced later to reduce the computation cost by assigning the edges or vertices on-the-ﬂy to the computing nodes without processing the graph before partitioning.</p> 

<p>In our thesis, we presented an experimental study of dierent streaming graph partitioning methods that use two partitioning techniques: vertex partitioning and edge partitioning. Edge partitioning has proved good for partitioning highly skewed graphs. After implementing dierent partitioning methods, we have proposed a partitioning algorithm that uses degree information of the vertices. Furthermore, we measured the eect of dierent partitioning methods on the graph stream processing algorithms.</p> 

<p>Our results show that for vertex partitioning Fennel has performed better than Linear Greedy as it shows lower edge-cuts and better load balancing. Moreover, for edge partitioning, the Degree based partitioner has performed better than Least Cost Incremental and Least Cost Incremental Advanced in reducing the replication factor, but the Degree based partitioner does not do well in load balancing. In the end, we show that the custom partitioning methods, compared to default hash partitioning, save the memory space by reducing the size of aggregate states during execution of dierent graph processing algorithms on the resulting partitions. The Degree based partitioner performed well by reducing the size of aggregate states on average up to 50%. Other algorithms include: Fennel, Linear Greedy, Least Cost Incremental and Least Cost Incremental Advanced, they reduced the size of aggregate states on average up to 21%, 10%, 27% and 48%.</p> 

<p>Referat</p> 

<p>Grafpartitionering anses vara en standardlösning för att eektivt bearbeta stora grafer, när behandling av dem på en enda maskin blir ineektiv på grund av dess begränsade beräkningskraft och lagringsutrymme. I grafpartitionering är hela gra- fen delad mellan olika beräkningsnoder som bearbetar grafen parallellt. Under de tidiga stadierna av forskning gjord på grafpartitionering har olika oine partitio- neringsmetoder introducerats; dessa metoder skapar höga beräkningskostnadner eftersom de behandlar hela grafen före uppdelning. Därför introducerades senare en online graördelningsmetod som kallas streaming graph partitioning för att minska beräkningskostnaden genom att tilldela kanterna eller hörnen under processen till beräkningsnoder utan att bearbeta grafen före partitionering.</p> 

<p>I vår uppsats presenterade vi en experimentell studie av olika strömmande graf- partitioneringsmetoder som använder två uppdelningstekniker: hörnpartitionering och kantpartitionering. Kantpartitionering har visat sig vara bra för uppdelning av mycket skeva grafer. Efter genomförandet av olika partitioneringsmetoder, har vi föreslagit en partitioneringsalgoritm som använder gradinformationen från hör- nen. Dessutom mätte vi eekten av olika partitioneringsmetoder i graph stream processing-algoritmerna.</p> 

<p>Våra resultat visar att Fennel presterade bättre än Linear Greedy för hörnpartitione- ring eftersom den visar lägre kantavskärning och bättre lastbalansering. Dessutom för kantpartitionering, den stegbaserade partitioneringen presterade bättre än Least Cost Incremental och Least Cost Incremental Advanced att minska replikationsfaktorn, men stegbaserade partitioneringen hanterar inte lastbalansering så bra. I slutän- dan, visar vi att de anpassade partitioneringsmetoder, jämfört med standard hash partitionering, sparar minnesutrymme genom att minska storleken av aggregerade tillstånd under utförande av olika grafalgoritmer på de resulterande partitionerna. Stegbaserade partitioneringen presterade väl genom att minska storleken av aggrege- rade tillstånd i genomsnitt upp till 50%. Andra algoritmer inkluderar: Fennel, Linear Greedy, Least Cost Incremental och Least Cost Incremental Advanced. De minskade storleken på aggregerade tillståndet med i genomsnitt upp till 21%, 10%, 27% och 48%.</p> 

